import { capitalize } from './helpers';
import { isPlainObject } from './meta-reducers/utils';
import { createFeatureSelector, createSelector, } from './selector';
/**
 * @description
 * A function that accepts a feature name and a feature reducer, and creates
 * a feature selector and a selector for each feature state property.
 *
 * @param featureConfig An object that contains a feature name and a feature reducer.
 * @returns An object that contains a feature name, a feature reducer,
 * a feature selector, and a selector for each feature state property.
 *
 * @usageNotes
 *
 * **With Application State**
 *
 * ```ts
 * interface AppState {
 *   products: ProductsState;
 * }
 *
 * interface ProductsState {
 *   products: Product[];
 *   selectedId: string | null;
 * }
 *
 * const initialState: ProductsState = {
 *   products: [],
 *   selectedId: null,
 * };
 *
 * // AppState is passed as a generic argument
 * const productsFeature = createFeature<AppState>({
 *   name: 'products',
 *   reducer: createReducer(
 *     initialState,
 *     on(ProductsApiActions.loadSuccess(state, { products }) => ({
 *       ...state,
 *       products,
 *     }),
 *   ),
 * });
 *
 * const {
 *   selectProductsState, // type: MemoizedSelector<AppState, ProductsState>
 *   selectProducts, // type: MemoizedSelector<AppState, Product[]>
 *   selectSelectedId, // type: MemoizedSelector<AppState, string | null>
 * } = productsFeature;
 * ```
 *
 * **Without Application State**
 *
 * ```ts
 * const productsFeature = createFeature({
 *   name: 'products',
 *   reducer: createReducer(initialState),
 * });
 *
 * const {
 *   selectProductsState, // type: MemoizedSelector<Record<string, any>, ProductsState>
 *   selectProducts, // type: MemoizedSelector<Record<string, any>, Product[]>
 *   selectSelectedId, // type: MemoizedSelector<Record<string, any, string | null>
 * } = productsFeature;
 * ```
 */
export function createFeature(featureConfig) {
    const { name, reducer } = featureConfig;
    const featureSelector = createFeatureSelector(name);
    const nestedSelectors = createNestedSelectors(featureSelector, reducer);
    return {
        name,
        reducer,
        [`select${capitalize(name)}State`]: featureSelector,
        ...nestedSelectors,
    };
}
function createNestedSelectors(featureSelector, reducer) {
    const initialState = getInitialState(reducer);
    const nestedKeys = (isPlainObject(initialState) ? Object.keys(initialState) : []);
    return nestedKeys.reduce((nestedSelectors, nestedKey) => ({
        ...nestedSelectors,
        [`select${capitalize(nestedKey)}`]: createSelector(featureSelector, (parentState) => parentState?.[nestedKey]),
    }), {});
}
function getInitialState(reducer) {
    return reducer(undefined, { type: '@ngrx/feature/init' });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdHVyZV9jcmVhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9zdG9yZS9zcmMvZmVhdHVyZV9jcmVhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFdkMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFDTCxxQkFBcUIsRUFDckIsY0FBYyxHQUVmLE1BQU0sWUFBWSxDQUFDO0FBcUJwQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTZERztBQUNILE1BQU0sVUFBVSxhQUFhLENBSzNCLGFBQzJDO0lBRTNDLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsYUFBYSxDQUFDO0lBQ3hDLE1BQU0sZUFBZSxHQUFHLHFCQUFxQixDQUFlLElBQUksQ0FBQyxDQUFDO0lBQ2xFLE1BQU0sZUFBZSxHQUFHLHFCQUFxQixDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUV4RSxPQUFPO1FBQ0wsSUFBSTtRQUNKLE9BQU87UUFDUCxDQUFDLFNBQVMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxlQUFlO1FBQ25ELEdBQUcsZUFBZTtLQUN3QyxDQUFDO0FBQy9ELENBQUM7QUFFRCxTQUFTLHFCQUFxQixDQUk1QixlQUF5RCxFQUN6RCxPQUFvQztJQUVwQyxNQUFNLFlBQVksR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUMsTUFBTSxVQUFVLEdBQUcsQ0FDakIsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ3ZCLENBQUM7SUFFeEMsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUN0QixDQUFDLGVBQWUsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDL0IsR0FBRyxlQUFlO1FBQ2xCLENBQUMsU0FBUyxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLGNBQWMsQ0FDaEQsZUFBZSxFQUNmLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FDMUM7S0FDRixDQUFDLEVBQ0YsRUFBNkMsQ0FDOUMsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FDdEIsT0FBb0M7SUFFcEMsT0FBTyxPQUFPLENBQUMsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLG9CQUFvQixFQUFFLENBQUMsQ0FBQztBQUM1RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQgeyBBY3Rpb25SZWR1Y2VyIH0gZnJvbSAnLi9tb2RlbHMnO1xuaW1wb3J0IHsgaXNQbGFpbk9iamVjdCB9IGZyb20gJy4vbWV0YS1yZWR1Y2Vycy91dGlscyc7XG5pbXBvcnQge1xuICBjcmVhdGVGZWF0dXJlU2VsZWN0b3IsXG4gIGNyZWF0ZVNlbGVjdG9yLFxuICBNZW1vaXplZFNlbGVjdG9yLFxufSBmcm9tICcuL3NlbGVjdG9yJztcbmltcG9ydCB7IEZlYXR1cmVTZWxlY3RvciwgTmVzdGVkU2VsZWN0b3JzIH0gZnJvbSAnLi9mZWF0dXJlX2NyZWF0b3JfbW9kZWxzJztcblxuZXhwb3J0IHR5cGUgRmVhdHVyZTxcbiAgQXBwU3RhdGUgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICBGZWF0dXJlTmFtZSBleHRlbmRzIGtleW9mIEFwcFN0YXRlICYgc3RyaW5nLFxuICBGZWF0dXJlU3RhdGUgZXh0ZW5kcyBBcHBTdGF0ZVtGZWF0dXJlTmFtZV1cbj4gPSBGZWF0dXJlQ29uZmlnPEZlYXR1cmVOYW1lLCBGZWF0dXJlU3RhdGU+ICZcbiAgRmVhdHVyZVNlbGVjdG9yPEFwcFN0YXRlLCBGZWF0dXJlTmFtZSwgRmVhdHVyZVN0YXRlPiAmXG4gIE5lc3RlZFNlbGVjdG9yczxBcHBTdGF0ZSwgRmVhdHVyZVN0YXRlPjtcblxuZXhwb3J0IGludGVyZmFjZSBGZWF0dXJlQ29uZmlnPEZlYXR1cmVOYW1lIGV4dGVuZHMgc3RyaW5nLCBGZWF0dXJlU3RhdGU+IHtcbiAgbmFtZTogRmVhdHVyZU5hbWU7XG4gIHJlZHVjZXI6IEFjdGlvblJlZHVjZXI8RmVhdHVyZVN0YXRlPjtcbn1cblxudHlwZSBOb3RBbGxvd2VkRmVhdHVyZVN0YXRlQ2hlY2s8RmVhdHVyZVN0YXRlPiA9XG4gIEZlYXR1cmVTdGF0ZSBleHRlbmRzIFJlcXVpcmVkPEZlYXR1cmVTdGF0ZT5cbiAgICA/IHVua25vd25cbiAgICA6ICdvcHRpb25hbCBwcm9wZXJ0aWVzIGFyZSBub3QgYWxsb3dlZCBpbiB0aGUgZmVhdHVyZSBzdGF0ZSc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhIGZlYXR1cmUgbmFtZSBhbmQgYSBmZWF0dXJlIHJlZHVjZXIsIGFuZCBjcmVhdGVzXG4gKiBhIGZlYXR1cmUgc2VsZWN0b3IgYW5kIGEgc2VsZWN0b3IgZm9yIGVhY2ggZmVhdHVyZSBzdGF0ZSBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0gZmVhdHVyZUNvbmZpZyBBbiBvYmplY3QgdGhhdCBjb250YWlucyBhIGZlYXR1cmUgbmFtZSBhbmQgYSBmZWF0dXJlIHJlZHVjZXIuXG4gKiBAcmV0dXJucyBBbiBvYmplY3QgdGhhdCBjb250YWlucyBhIGZlYXR1cmUgbmFtZSwgYSBmZWF0dXJlIHJlZHVjZXIsXG4gKiBhIGZlYXR1cmUgc2VsZWN0b3IsIGFuZCBhIHNlbGVjdG9yIGZvciBlYWNoIGZlYXR1cmUgc3RhdGUgcHJvcGVydHkuXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqXG4gKiAqKldpdGggQXBwbGljYXRpb24gU3RhdGUqKlxuICpcbiAqIGBgYHRzXG4gKiBpbnRlcmZhY2UgQXBwU3RhdGUge1xuICogICBwcm9kdWN0czogUHJvZHVjdHNTdGF0ZTtcbiAqIH1cbiAqXG4gKiBpbnRlcmZhY2UgUHJvZHVjdHNTdGF0ZSB7XG4gKiAgIHByb2R1Y3RzOiBQcm9kdWN0W107XG4gKiAgIHNlbGVjdGVkSWQ6IHN0cmluZyB8IG51bGw7XG4gKiB9XG4gKlxuICogY29uc3QgaW5pdGlhbFN0YXRlOiBQcm9kdWN0c1N0YXRlID0ge1xuICogICBwcm9kdWN0czogW10sXG4gKiAgIHNlbGVjdGVkSWQ6IG51bGwsXG4gKiB9O1xuICpcbiAqIC8vIEFwcFN0YXRlIGlzIHBhc3NlZCBhcyBhIGdlbmVyaWMgYXJndW1lbnRcbiAqIGNvbnN0IHByb2R1Y3RzRmVhdHVyZSA9IGNyZWF0ZUZlYXR1cmU8QXBwU3RhdGU+KHtcbiAqICAgbmFtZTogJ3Byb2R1Y3RzJyxcbiAqICAgcmVkdWNlcjogY3JlYXRlUmVkdWNlcihcbiAqICAgICBpbml0aWFsU3RhdGUsXG4gKiAgICAgb24oUHJvZHVjdHNBcGlBY3Rpb25zLmxvYWRTdWNjZXNzKHN0YXRlLCB7IHByb2R1Y3RzIH0pID0+ICh7XG4gKiAgICAgICAuLi5zdGF0ZSxcbiAqICAgICAgIHByb2R1Y3RzLFxuICogICAgIH0pLFxuICogICApLFxuICogfSk7XG4gKlxuICogY29uc3Qge1xuICogICBzZWxlY3RQcm9kdWN0c1N0YXRlLCAvLyB0eXBlOiBNZW1vaXplZFNlbGVjdG9yPEFwcFN0YXRlLCBQcm9kdWN0c1N0YXRlPlxuICogICBzZWxlY3RQcm9kdWN0cywgLy8gdHlwZTogTWVtb2l6ZWRTZWxlY3RvcjxBcHBTdGF0ZSwgUHJvZHVjdFtdPlxuICogICBzZWxlY3RTZWxlY3RlZElkLCAvLyB0eXBlOiBNZW1vaXplZFNlbGVjdG9yPEFwcFN0YXRlLCBzdHJpbmcgfCBudWxsPlxuICogfSA9IHByb2R1Y3RzRmVhdHVyZTtcbiAqIGBgYFxuICpcbiAqICoqV2l0aG91dCBBcHBsaWNhdGlvbiBTdGF0ZSoqXG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IHByb2R1Y3RzRmVhdHVyZSA9IGNyZWF0ZUZlYXR1cmUoe1xuICogICBuYW1lOiAncHJvZHVjdHMnLFxuICogICByZWR1Y2VyOiBjcmVhdGVSZWR1Y2VyKGluaXRpYWxTdGF0ZSksXG4gKiB9KTtcbiAqXG4gKiBjb25zdCB7XG4gKiAgIHNlbGVjdFByb2R1Y3RzU3RhdGUsIC8vIHR5cGU6IE1lbW9pemVkU2VsZWN0b3I8UmVjb3JkPHN0cmluZywgYW55PiwgUHJvZHVjdHNTdGF0ZT5cbiAqICAgc2VsZWN0UHJvZHVjdHMsIC8vIHR5cGU6IE1lbW9pemVkU2VsZWN0b3I8UmVjb3JkPHN0cmluZywgYW55PiwgUHJvZHVjdFtdPlxuICogICBzZWxlY3RTZWxlY3RlZElkLCAvLyB0eXBlOiBNZW1vaXplZFNlbGVjdG9yPFJlY29yZDxzdHJpbmcsIGFueSwgc3RyaW5nIHwgbnVsbD5cbiAqIH0gPSBwcm9kdWN0c0ZlYXR1cmU7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZlYXR1cmU8XG4gIEFwcFN0YXRlIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55PixcbiAgRmVhdHVyZU5hbWUgZXh0ZW5kcyBrZXlvZiBBcHBTdGF0ZSAmIHN0cmluZyA9IGtleW9mIEFwcFN0YXRlICYgc3RyaW5nLFxuICBGZWF0dXJlU3RhdGUgZXh0ZW5kcyBBcHBTdGF0ZVtGZWF0dXJlTmFtZV0gPSBBcHBTdGF0ZVtGZWF0dXJlTmFtZV1cbj4oXG4gIGZlYXR1cmVDb25maWc6IEZlYXR1cmVDb25maWc8RmVhdHVyZU5hbWUsIEZlYXR1cmVTdGF0ZT4gJlxuICAgIE5vdEFsbG93ZWRGZWF0dXJlU3RhdGVDaGVjazxGZWF0dXJlU3RhdGU+XG4pOiBGZWF0dXJlPEFwcFN0YXRlLCBGZWF0dXJlTmFtZSwgRmVhdHVyZVN0YXRlPiB7XG4gIGNvbnN0IHsgbmFtZSwgcmVkdWNlciB9ID0gZmVhdHVyZUNvbmZpZztcbiAgY29uc3QgZmVhdHVyZVNlbGVjdG9yID0gY3JlYXRlRmVhdHVyZVNlbGVjdG9yPEZlYXR1cmVTdGF0ZT4obmFtZSk7XG4gIGNvbnN0IG5lc3RlZFNlbGVjdG9ycyA9IGNyZWF0ZU5lc3RlZFNlbGVjdG9ycyhmZWF0dXJlU2VsZWN0b3IsIHJlZHVjZXIpO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZSxcbiAgICByZWR1Y2VyLFxuICAgIFtgc2VsZWN0JHtjYXBpdGFsaXplKG5hbWUpfVN0YXRlYF06IGZlYXR1cmVTZWxlY3RvcixcbiAgICAuLi5uZXN0ZWRTZWxlY3RvcnMsXG4gIH0gYXMgdW5rbm93biBhcyBGZWF0dXJlPEFwcFN0YXRlLCBGZWF0dXJlTmFtZSwgRmVhdHVyZVN0YXRlPjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTmVzdGVkU2VsZWN0b3JzPFxuICBBcHBTdGF0ZSBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4sXG4gIEZlYXR1cmVTdGF0ZVxuPihcbiAgZmVhdHVyZVNlbGVjdG9yOiBNZW1vaXplZFNlbGVjdG9yPEFwcFN0YXRlLCBGZWF0dXJlU3RhdGU+LFxuICByZWR1Y2VyOiBBY3Rpb25SZWR1Y2VyPEZlYXR1cmVTdGF0ZT5cbik6IE5lc3RlZFNlbGVjdG9yczxBcHBTdGF0ZSwgRmVhdHVyZVN0YXRlPiB7XG4gIGNvbnN0IGluaXRpYWxTdGF0ZSA9IGdldEluaXRpYWxTdGF0ZShyZWR1Y2VyKTtcbiAgY29uc3QgbmVzdGVkS2V5cyA9IChcbiAgICBpc1BsYWluT2JqZWN0KGluaXRpYWxTdGF0ZSkgPyBPYmplY3Qua2V5cyhpbml0aWFsU3RhdGUpIDogW11cbiAgKSBhcyBBcnJheTxrZXlvZiBGZWF0dXJlU3RhdGUgJiBzdHJpbmc+O1xuXG4gIHJldHVybiBuZXN0ZWRLZXlzLnJlZHVjZShcbiAgICAobmVzdGVkU2VsZWN0b3JzLCBuZXN0ZWRLZXkpID0+ICh7XG4gICAgICAuLi5uZXN0ZWRTZWxlY3RvcnMsXG4gICAgICBbYHNlbGVjdCR7Y2FwaXRhbGl6ZShuZXN0ZWRLZXkpfWBdOiBjcmVhdGVTZWxlY3RvcihcbiAgICAgICAgZmVhdHVyZVNlbGVjdG9yLFxuICAgICAgICAocGFyZW50U3RhdGUpID0+IHBhcmVudFN0YXRlPy5bbmVzdGVkS2V5XVxuICAgICAgKSxcbiAgICB9KSxcbiAgICB7fSBhcyBOZXN0ZWRTZWxlY3RvcnM8QXBwU3RhdGUsIEZlYXR1cmVTdGF0ZT5cbiAgKTtcbn1cblxuZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlPEZlYXR1cmVTdGF0ZT4oXG4gIHJlZHVjZXI6IEFjdGlvblJlZHVjZXI8RmVhdHVyZVN0YXRlPlxuKTogRmVhdHVyZVN0YXRlIHtcbiAgcmV0dXJuIHJlZHVjZXIodW5kZWZpbmVkLCB7IHR5cGU6ICdAbmdyeC9mZWF0dXJlL2luaXQnIH0pO1xufVxuIl19